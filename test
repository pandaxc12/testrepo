import sqlite3
from flask import Flask, render_template, request, jsonify

app = Flask(__name__)


def create_table():
    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS tasks
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  name TEXT NOT NULL,
                  completed BOOLEAN NOT NULL,
                  product TEXT,
                  env TEXT,
                  location TEXT,
                  entity TEXT,
                  type TEXT,
                  custom_description TEXT)''')
    conn.commit()
    conn.close()


@app.route('/')
def index():
    create_table()
    return render_template('index.html')


@app.route('/save_task', methods=['POST'])
def save_task():
    data = request.get_json()
    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()
    if 'id' in data:
        c.execute('UPDATE tasks SET name =?, completed =?, product =?, env =?, location =?, entity =?, type =?, custom_description =? WHERE id =?',
                  (data['name'], data['completed'], data['product'], data['env'], data['location'], data['entity'], data['type'], data['custom_description'], data['id']))
    else:
        c.execute('INSERT INTO tasks (name, completed, product, env, location, entity, type, custom_description) VALUES (?,?,?,?,?,?,?,?)',
                  (data['name'], data['completed'], data['product'], data['env'], data['location'], data['entity'], data['type'], data['custom_description']))
    conn.commit()
    conn.close()
    return jsonify({"message": "Task saved successfully"})


@app.route('/get_tasks', methods=['GET'])
def get_tasks():
    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()
    c.execute('SELECT id, name, completed, product, env, location, entity, type, custom_description FROM tasks')
    tasks = [{"id": row[0], "name": row[1], "completed": bool(row[2]), "product": row[3], "env": row[4],
              "location": row[5], "entity": row[6], "type": row[7], "custom_description": row[8]} for row in c.fetchall()]
    conn.close()
    return jsonify(tasks)


@app.route('/delete_task', methods=['POST'])
def delete_task():
    task_id = request.get_json()['id']
    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()
    c.execute('DELETE FROM tasks WHERE id =?', (task_id,))
    conn.commit()
    conn.close()
    return jsonify({"message": "Task deleted successfully"})


if __name__ == '__main__':
    app.run(debug=True)